
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;
import java.sql.*;
import java.io.*;
import java.net.*;

public class ClientGame extends javax.swing.JFrame{

    /**
     * Creates new form TypingCheck
     */
    Socket socket;
    DataOutputStream dos;
    DataInputStream dis;
    OutputStream os;
    InputStream is;
    boolean check,resultCalled;
    int total;
    int count;
    int stop;
    boolean isWordCorrect;
    int lastSpace;
    long start_time_milli,end_time_milli;
    int correct,incorrect;//count number of correct and incorect words
    public ClientGame(Socket s1) throws IOException {
        System.out.println("Client");
        socket=s1;
        is=socket.getInputStream();
        dis=new DataInputStream(is);
        os=socket.getOutputStream();
        dos=new DataOutputStream(os);
        initComponents();
        count=-1;
        stop=0;
        isWordCorrect=true;
        lastSpace=-1;
        check=true;
        correct=0;
        incorrect=0;
        total=0;
        resultCalled=false;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        difficulty = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userOutput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        userInput = new javax.swing.JTextArea();
        fetch = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        time = new javax.swing.JTextField();
        correctWords = new javax.swing.JTextField();
        incorrectWords = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("American Typewriter", 3, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TYPE RACER");

        jLabel2.setFont(new java.awt.Font("American Typewriter", 3, 14)); // NOI18N
        jLabel2.setText("DON'T BECOME LAZY.. HUST BE IN AN ENERGY SAVING MODE AND TEST YOUR TYPING !!");

        userOutput.setEditable(false);
        userOutput.setColumns(20);
        userOutput.setRows(5);
        userOutput.setText("SELECT THE DIFFICULTY AND THEN CLICK START TO SELECT THE SAMPLE TEXT.\nTHE TIMER WILL START WHEN YOU START TYPING.\nWORD WILL BE CORRECT IF IT MATCHES WITH THE SAMPLE TEXT INCLUDING THE SPACES.");
        userOutput.setWrapStyleWord(true);
        userOutput.setLineWrap(true);
        userOutput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userOutputMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userOutput);

        userInput.setColumns(20);
        userInput.setRows(5);
        userInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userInputMouseClicked(evt);
            }
        });
        userInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userInputKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                userInputKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(userInput);

        fetch.setFont(new java.awt.Font("American Typewriter", 3, 18)); // NOI18N
        fetch.setText("Fetch Text");
        fetch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("American Typewriter", 3, 14)); // NOI18N
        jButton2.setText("RESET");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        time.setEditable(false);
        time.setFont(new java.awt.Font("American Typewriter", 3, 36)); // NOI18N
        time.setForeground(new java.awt.Color(0, 0, 255));
        time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeActionPerformed(evt);
            }
        });

        correctWords.setForeground(new java.awt.Color(0, 255, 0));
        correctWords.setText("0");
        correctWords.setCaretColor(new java.awt.Color(255, 0, 0));

        incorrectWords.setForeground(new java.awt.Color(255, 0, 0));
        incorrectWords.setText("0");

        jLabel3.setText("Correct Words Typed");

        jLabel4.setText("Incorrect Words Typed");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fetch, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(correctWords, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addComponent(incorrectWords, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(154, 154, 154))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(incorrectWords, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(correctWords))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fetch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(time, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        ClientGame ob=this;
        ob.dispose();
        ClientGame ob1;
        try {
            ob1 = new ClientGame(socket);
            ob1.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(ClientGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void timeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeActionPerformed

    }//GEN-LAST:event_timeActionPerformed

    private void fetchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchActionPerformed
        fetch.setVisible(false);
        setSampleText();
       //System.out.println(adjusted);
    }//GEN-LAST:event_fetchActionPerformed
    void timer()
    {
        final int m1=2,s1=0;   
        Thread t=new Thread(){
                @Override
                synchronized public void run()
                {
                    int m=m1,s=s1;
                    try{
                        while(m!=0||s!=0)
                        {
                            while(correct+incorrect==total)
                            {
                                
                                userInput.setVisible(false);
                                wait();
                            }
                            if(s>=10)
                                time.setText(m+":"+s);
                            else if(s<=9)
                                time.setText(m+":0"+s);
                            else
                                time.setText(m+":00");
                            //System.out.println(m+":"+s);
                            if(s==0)
                            {
                                m--;
                                s=60;
                            }
                             s--;
                             
                            Thread.sleep(1000);
                        }
                        time.setText("0:00");
                    }
                    catch(Exception e){
                        System.out.println("Exception");
                    }
                    }
            };
        t.start(); 
    }
    private void userInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userInputKeyPressed
    
    }//GEN-LAST:event_userInputKeyPressed

   void setSampleText()
   {
         try{
             String s1=dis.readUTF();
            System.out.println(s1);
            int l=s1.length();
            for(int i=0;i<l;i++)
            {
                if(s1.charAt(i)==' ')
                {
                    total++;
                }
            }
            userOutput.setText(s1);
        }
        catch(Exception e)
        {
            System.err.println(e);
        }
   }
  
    private void userInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userInputMouseClicked
    
      
    }//GEN-LAST:event_userInputMouseClicked
    void stop()
    {
        final long time2=start_time_milli;
        Thread t=new Thread(){
        public void run()
        {
            while(1==1)
            {
                long time1=System.currentTimeMillis();
                if(time1-time2>=60000*2)
                    break;
            }
            userInput.setVisible(false);
            String x=time.getText();
            System.out.println("Client#"+x+"#");
            if((correct+incorrect==total||x.equals("0:00"))&&resultCalled==false)
                                    {
                                        resultCalled=true;
                                        userInput.setVisible(false);
                                        try {
                                            result();
                                        } catch (IOException ex) {
                                            Logger.getLogger(ServerGame.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
        }
        };
        t.start();
    }
    private void userInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userInputKeyTyped
    if(check) //add text prompt to text field
    {
       check=false;
       start_time_milli = System.currentTimeMillis();
       System.out.println(start_time_milli);
       timer();
       stop();
       /*String radio=difficulty.getSelection().getActionCommand();
       if(radio.equals("1"))
       {
           medium.setVisible(false);
           hard.setVisible(false);;
       }
       else if(radio.equals("2"))
       {
           easy.setVisible(false);
           hard.setVisible(false);;
       }
       else if(radio.equals("3"))
       {
           medium.setVisible(false);
           easy.setVisible(false);;
       }*/
       
    }
        char ch=evt.getKeyChar();
        if(ch==' ')
            stop=0;
        if(stop==0||(ch==' '&&stop==1))//for checking if the entered word is correct or not
        {
            if(ch!=KeyEvent.VK_BACK_SPACE && ch!=' ')
            {
                count++;//counts the number of characters inputted
                String s=userOutput.getText();
                String s1=s.substring(count+1);
                int nextSpace=s1.indexOf(' ')+count+1;
                char ch1=s.charAt(count);
                System.out.println(ch+" "+ch1+" "+count);
                if(ch!=ch1)
                {
                    if(ch1!=' ')
                    {
                        try {
                            removeHighlight();
                            highlight(lastSpace+1,nextSpace,1);
                        } catch (BadLocationException ex) {
                            Logger.getLogger(TypingCheck.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else if(ch1==' ')
                    {
                        try {
                            removeHighlight();
                            highlight(lastSpace+1,count,1);
                        } catch (BadLocationException ex) {
                            Logger.getLogger(TypingCheck.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        stop=1;
                        count--;
                    }
                    isWordCorrect=false;
                }
                if(ch==ch1&&isWordCorrect)
                {
                    removeHighlight();
                    try {
                        highlight(lastSpace+1,nextSpace,3);
                    } catch (BadLocationException ex) {
                        Logger.getLogger(TypingCheck.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            else if(ch==' ')//means according to user he has inputted a word and we have to decide if word is correct or not
            {
        // TODO add your handling code here:
                count++;
                String s=userOutput.getText();
                String s1=s.substring(count+1);
                int nextSpace=s1.indexOf(' ')+count+1;
                char ch1=s.charAt(count); 
                System.out.println(ch+" "+ch1+" "+count);
                if(ch1==' ')
                {
                    if(isWordCorrect)
                    {
                        removeHighlight();
                        correct++;
                        correctWords.setText(""+correct);
                        System.out.println("3rd position"+(lastSpace)+" "+(count));
                        try {
                            highlight(lastSpace+1,count,2);
                        } catch (BadLocationException ex) {
                            Logger.getLogger(TypingCheck.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else
                    {
                        removeHighlight();
                        incorrect++;
                        incorrectWords.setText(""+incorrect);
                        System.out.println("4th position"+(lastSpace+1)+" "+(count));
                        try {
                            highlight(lastSpace+1,count,1);
                        } catch (BadLocationException ex) {
                            Logger.getLogger(TypingCheck.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    isWordCorrect=true;
                    lastSpace=count;
                    userInput.setText("");
                }
            }
            else if(ch==KeyEvent.VK_BACK_SPACE)
            {
                System.out.println("BackSpace");
                if(count==lastSpace) {
                }
                else
                {
                    System.out.println("BackSpace");
                    count--;
                    String s=userInput.getText();
                    int lastSpaceInput=s.lastIndexOf(' ');
                    String inputPart=s.substring(lastSpaceInput+1);
                    String s2=userOutput.getText();
                    String outputPart=s2.substring(lastSpace+1,count+1);
                    String s3=s2.substring(count+1);
                    int nextSpace=s3.indexOf(' ')+count+1;
                    if(outputPart.equals(inputPart))
                    {
                        removeHighlight();
                        try {
                            highlight(lastSpace+1,nextSpace,3);
                        } catch (BadLocationException ex) {
                            Logger.getLogger(TypingCheck.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        isWordCorrect=true;
                    }
                    else
                    {
                        removeHighlight();
                        
                        try {
                            highlight(lastSpace+1,nextSpace,1);
                        } catch (BadLocationException ex) {
                            Logger.getLogger(TypingCheck.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        isWordCorrect=false;
                    }
                }
            }
        }
        else if(ch==KeyEvent.VK_BACK_SPACE)
            {
                String s=userOutput.getText();
                String s1=s.substring(count+1);
                int nextSpace=s1.indexOf(' ')+count+1;
                String s2=userInput.getText();
                int inputLength=s2.length();
                int outputLength=nextSpace-lastSpace-1;
                System.out.println("1 Backspace");
                if(inputLength<outputLength)
                {
                    System.out.println("1 Backspace stop=0 "+inputLength+" "+outputLength);
                    stop=0;
                }
                else if(inputLength==outputLength)
                {
                    String toCheck=s.substring(lastSpace+1,nextSpace);
                    if(s2.equals(toCheck))
                    {
                        System.out.println("1 Backspace yellow "+s2+" "+toCheck);
                        removeHighlight();
                        try {
                            highlight(lastSpace+1,nextSpace,3);
                        } catch (BadLocationException ex) {
                            Logger.getLogger(TypingCheck.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        isWordCorrect=true;
                    }
                    else
                    {
                        System.out.println("1 Backspace red "+s2+" "+toCheck);
                        removeHighlight();
                        try {
                            highlight(lastSpace,nextSpace,1);
                        } catch (BadLocationException ex) {
                            Logger.getLogger(TypingCheck.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }String x=time.getText();
            System.out.println("Client#"+x+"#");
            if((correct+incorrect==total||x.equals("0:00"))&&resultCalled==false)
                                    {
                                        resultCalled=true;
                                        userInput.setVisible(false);
                                        try {
                                            result();
                                        } catch (IOException ex) {
                                            Logger.getLogger(ServerGame.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
    }//GEN-LAST:event_userInputKeyTyped
    void result() throws IOException
    {
        String my=time.getText()+"#"+correct+"#"+incorrect;
        System.out.println("Client "+my);
        dos.writeUTF(my);
        String opp=dis.readUTF();
        Result ob=new Result(my,opp);
        ob.setVisible(true);
        ob.run();
    }
    private void userOutputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userOutputMouseClicked
     // TODO add your handling code here:
    }//GEN-LAST:event_userOutputMouseClicked
    void highlight(int x,int y,int option) throws BadLocationException //option=1 for highlight red, option=2 for highlight green, option=3 for yellow
    {
        Highlighter highlighter=userOutput.getHighlighter();
        HighlightPainter painterRed=new DefaultHighlighter.DefaultHighlightPainter(Color.red);
        HighlightPainter painterGreen=new DefaultHighlighter.DefaultHighlightPainter(Color.green);
        HighlightPainter painterYellow=new DefaultHighlighter.DefaultHighlightPainter(Color.yellow);
        if(option==1)
            highlighter.addHighlight(x, y, painterRed);
        else if(option==2)
            highlighter.addHighlight(x, y, painterGreen);
        else if(option==3)
            highlighter.addHighlight(x, y, painterYellow);
    }
    /**
     * @param args the command line arguments
     */
    public void removeHighlight()
    {
        Highlighter hilite=userOutput.getHighlighter();
        Highlighter.Highlight[] hilites=hilite.getHighlights();
        int l=hilites.length;
        System.out.println("Length "+l);
        for(int i=l-1;i>=0;i--)
        {
            if(hilites[i].getPainter() instanceof DefaultHighlighter.DefaultHighlightPainter)
            {
                hilite.removeHighlight(hilites[i]);
                break;
            }
        }
        
        
    }
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField correctWords;
    private javax.swing.ButtonGroup difficulty;
    private javax.swing.JButton fetch;
    private javax.swing.JTextField incorrectWords;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField time;
    private javax.swing.JTextArea userInput;
    private javax.swing.JTextArea userOutput;
    // End of variables declaration//GEN-END:variables
     public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TypingCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TypingCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TypingCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TypingCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TypingCheck().setVisible(true);
            }
        });
} 
}
      
      
